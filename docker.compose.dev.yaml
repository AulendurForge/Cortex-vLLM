name: cortex

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: cortex
      POSTGRES_PASSWORD: cortex
      POSTGRES_DB: cortex
    healthcheck: { test: ["CMD-SHELL", "pg_isready -U cortex"], interval: 5s, timeout: 5s, retries: 10 }
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    volumes:
      - redis_data:/data

  gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env.dev
    environment:
      VLLM_GEN_URLS: ""
      VLLM_EMB_URLS: ""
      INTERNAL_VLLM_API_KEY: dev-internal-token
      GATEWAY_DEV_ALLOW_ALL_KEYS: "true"
      CORS_ENABLED: "true"
      # Dynamic CORS origins using detected host IP, plus localhost fallbacks
      CORS_ALLOW_ORIGINS: http://${HOST_IP:-localhost}:3001,http://localhost:3001,http://127.0.0.1:3001
      # Auto-bootstrap admin user on first startup (dev mode)
      ADMIN_BOOTSTRAP_USERNAME: ${ADMIN_BOOTSTRAP_USERNAME:-admin}
      ADMIN_BOOTSTRAP_PASSWORD: ${ADMIN_BOOTSTRAP_PASSWORD:-admin}
      ADMIN_BOOTSTRAP_ORG: ${ADMIN_BOOTSTRAP_ORG:-Default}
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      # Inside the container, always use the container mount points
      CORTEX_MODELS_DIR: /var/cortex/models
      HF_CACHE_DIR: /var/cortex/hf-cache
      # Explicitly pass host paths for Docker-managed vLLM containers
      CORTEX_MODELS_DIR_HOST: ${CORTEX_MODELS_DIR:-/var/cortex/models}
      HF_CACHE_DIR_HOST: ${HF_CACHE_DIR:-/var/cortex/hf-cache}
      VLLM_IMAGE: ${VLLM_IMAGE:-vllm/vllm-openai:latest}
    ports: ["${GATEWAY_PORT:-8084}:8084"]
    depends_on:
      - redis
      - postgres
    # Gateway does not require GPU; avoid reserving VRAM on dev hosts
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CORTEX_MODELS_DIR:-/var/cortex/models}:/var/cortex/models
      - ${HF_CACHE_DIR:-/var/cortex/hf-cache}:/var/cortex/hf-cache
    # Note: Gateway does not require GPU. Removed device reservations to allow startup on hosts
    # without NVIDIA runtime. GPU metrics are provided via dcgm-exporter profile when enabled.
    # Models directory is read-write to allow multi-part GGUF merging

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      # Frontend automatically detects gateway URL from browser hostname
      # No NEXT_PUBLIC_GATEWAY_URL needed - uses dynamic detection
      NODE_ENV: development
    ports: ["${FRONTEND_PORT:-3001}:3001"]
    depends_on:
      - gateway
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports: ["${PROM_PORT:-9090}:9090"]
    depends_on: [gateway]
    command: ["--config.file=/etc/prometheus/prometheus.yml","--storage.tsdb.retention.time=7d"]

  node-exporter:
    image: prom/node-exporter:latest
    pid: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)' 
    profiles: ["linux"]

  dcgm-exporter:
    image: nvidia/dcgm-exporter:latest
    # Request GPU access via Compose devices (works on Docker Desktop with WSL2 GPU support)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, utility, compute]
    runtime: nvidia
    cap_add:
      - SYS_ADMIN
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    ports:
      - "9400:9400"
    profiles: ["gpu"]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    privileged: true
    ports: ["8085:8084"]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    profiles: ["linux"]

  pgadmin:
    image: dpage/pgadmin4:8.7
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  pgadmin_data:

# Add Grafana and Admin UI later (Phase 4/6)